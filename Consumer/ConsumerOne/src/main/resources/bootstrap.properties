#端口 Eureka是一个web模块
server.port=7001
#这个应用的名字
spring.application.name=OrderConsumer
#这个应用的hostName
eureka.instance.instance-id=OrderConsumerOne
# 想要高可用 hostname必须不一样,如果设置了eureka.instance.prefer-ip-address hostName会被强制设置为IP
#将这个应用注册到那个EurekaServer 多个Eureka Server 互相注册 应用名字相同 就构成了高可用Eureka Server
eureka.client.service-url.defaultZone=http://${spring.security.user.name}:${spring.security.user.password}@cloud.eureka.one:4001/eureka,http://${spring.security.user.name}:${spring.security.user.password}@cloud.eureka.two:4002/eureka
#使用ip 做名字
eureka.instance.prefer-ip-address=true
# ----------优化eureka Server 自我保护机制 ------------------
# 告诉服务端，如果我2s之内没有给你发心跳，就代表我“死”了，将我踢出掉。
eureka.instance.lease-expiration-duration-in-seconds=90
# 每间隔5s，向服务端发送一次心跳，证明自己依然”存活“
eureka.instance.lease-renewal-interval-in-seconds=5
eureka.client.registry-fetch-interval-seconds=10
#安全认证的用户名
spring.security.user.name=admin
#安全认证的密码
spring.security.user.password=password
#要去那一个Config Server拉取配置
spring.cloud.config.uri=http://${spring.cloud.config.discovery.service-id}
# 去拉取配置的时候Config server 的用户名
spring.cloud.config.username=admin
# 去拉取配置的时候Config server 的密码
spring.cloud.config.password=password
#拉取的远程分支的label
spring.cloud.config.label=master
#拉取的远程分支的profile
spring.cloud.config.profile=dev
#拉取的远程分支的application
spring.cloud.config.name=order
#指示启用了配置服务器发现(将通过发现查找配置服务器URL)。
spring.cloud.config.discovery.enabled=true
#用于定位配置服务器的服务id。
spring.cloud.config.discovery.service-id=ConfigServer
#spring.zipkin.sender.type=web
#是否启动消息总线
spring.cloud.bus.enabled=true
#是否开启bus链路追踪
spring.cloud.bus.trace.enabled=true
#bus绑定的中间件
spring.cloud.stream.default-binder=kafka
#bus 使用的kafka地址
spring.cloud.stream.kafka.binder.brokers=192.168.160.201:9092
spring.kafka.consumer.group-id=SPRING_CLOUD_REFRESH_GROUP
spring.cloud.bus.destination=SpringCloudBusConfig
ribbon.ConnectTimeout=5000
ribbon.ReadTimeout=5000
feign.hystrix.enabled=true
#management.endpoints.web.exposure.include=*
#management.endpoint.health.show-dtails=always


